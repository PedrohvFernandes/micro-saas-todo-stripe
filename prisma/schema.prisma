// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// O Account é basicamente todas as contas que estão vinculadas ao usuario, no caso as contas externas, facebook, google...
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Aqui a gente tem todo o controle de seção, pra saber se aquela seção é valida...
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Aqui é auto explicativo
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  // Se o usuario logar com o google ele basicamente traz a imagem do google ou qualquer outra rede extenar
  image         String?

  accounts Account[]
  sessions Session[]
  // Relação Varios para 1. No caso o usuario possui muitas tarefas
  todos    Todo[]

  @@map("users")
}

// Aqui é para quando usamos magiclink, quando precisamos gerar um token nesse magic link, ou quando fazemos por exemplo uma redefinição de senha
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Todo {
  id     String @id @default(cuid())
  title  String
  userId String

  // Relação Varios para 1. No caso a tarefa possui um so usuario
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
